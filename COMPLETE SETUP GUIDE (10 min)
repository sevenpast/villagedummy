-- ============================================
-- VILLAGE COMPLETE DATABASE SCHEMA
-- ============================================

-- 1. USERS TABLE
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  auth_user_id UUID UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
  email VARCHAR(255) UNIQUE NOT NULL,
  first_name VARCHAR(100),
  last_name VARCHAR(100),
  date_of_birth DATE,
  phone VARCHAR(50),
  country_of_origin VARCHAR(100),
  current_address TEXT,
  municipality VARCHAR(100),
  canton VARCHAR(50),
  postal_code VARCHAR(10),
  employer VARCHAR(200),
  occupation VARCHAR(200),
  work_address TEXT,
  has_kids BOOLEAN DEFAULT false,
  num_children INTEGER DEFAULT 0,
  marital_status VARCHAR(50),
  months_in_switzerland INTEGER DEFAULT 0,
  arrival_date DATE,
  residence_permit_type VARCHAR(10),
  preferred_language VARCHAR(5) DEFAULT 'en',
  timezone VARCHAR(50) DEFAULT 'Europe/Zurich',
  is_verified BOOLEAN DEFAULT false,
  is_premium BOOLEAN DEFAULT false,
  onboarding_completed BOOLEAN DEFAULT false,
  metadata JSONB, -- For children data, etc.
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  last_login_at TIMESTAMP
);

-- 2. USER SEGMENTS
CREATE TABLE IF NOT EXISTS user_segments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  segment_name VARCHAR(100) NOT NULL,
  assigned_at TIMESTAMP DEFAULT NOW()
);

-- 3. MODULES
CREATE TABLE IF NOT EXISTS modules (
  id SERIAL PRIMARY KEY,
  title VARCHAR(200) NOT NULL,
  description TEXT,
  display_order INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW()
);

-- 4. TASKS
CREATE TABLE IF NOT EXISTS tasks (
  id SERIAL PRIMARY KEY,
  module_id INTEGER REFERENCES modules(id) ON DELETE CASCADE,
  task_number INTEGER NOT NULL,
  title VARCHAR(200) NOT NULL,
  category VARCHAR(100),
  is_urgent BOOLEAN DEFAULT false,
  deadline_days INTEGER,
  priority INTEGER DEFAULT 0,
  icon_name VARCHAR(50),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE (task_number)
);

-- 5. TASK VARIANTS
CREATE TABLE IF NOT EXISTS task_variants (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  task_id INTEGER REFERENCES tasks(id) ON DELETE CASCADE,
  target_audience JSONB NOT NULL DEFAULT '["all"]',
  intro TEXT NOT NULL,
  info_box TEXT NOT NULL,
  initial_question TEXT,
  answer_options JSONB,
  actions JSONB,
  ui_config JSONB,
  priority INTEGER DEFAULT 100,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- 6. USER TASK STATUS
CREATE TABLE IF NOT EXISTS user_task_status (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  task_id INTEGER REFERENCES tasks(id) ON DELETE CASCADE,
  status VARCHAR(50) DEFAULT 'not_started',
  shown_at TIMESTAMP,
  started_at TIMESTAMP,
  completed_at TIMESTAMP,
  form_data JSONB,
  user_answer TEXT,
  reminder_set_for TIMESTAMP,
  reminder_sent_at TIMESTAMP,
  reminder_days INTEGER,
  notes TEXT,
  last_interaction_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE (user_id, task_id)
);

-- 7. DOCUMENTS
CREATE TABLE IF NOT EXISTS documents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  file_name VARCHAR(255) NOT NULL,
  file_size INTEGER,
  file_type VARCHAR(50),
  storage_path TEXT NOT NULL,
  document_type VARCHAR(100),
  task_id INTEGER REFERENCES tasks(id),
  is_verified BOOLEAN DEFAULT false,
  verified_by UUID REFERENCES users(id),
  verified_at TIMESTAMP,
  uploaded_at TIMESTAMP DEFAULT NOW(),
  expires_at TIMESTAMP
);

-- 8. AI OPERATIONS
CREATE TABLE IF NOT EXISTS ai_operations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  task_id INTEGER REFERENCES tasks(id),
  operation_type VARCHAR(100) NOT NULL,
  input_data JSONB,
  output_data JSONB,
  input_tokens INTEGER,
  output_tokens INTEGER,
  total_tokens INTEGER,
  cost_usd DECIMAL(10, 6),
  model_name VARCHAR(100),
  status VARCHAR(50) DEFAULT 'success',
  error_message TEXT,
  duration_ms INTEGER,
  cache_hit BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW()
);

-- 9. MUNICIPALITY DATA
CREATE TABLE IF NOT EXISTS municipality_data (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  municipality VARCHAR(100) NOT NULL,
  canton VARCHAR(50) NOT NULL,
  official_website TEXT,
  contact_email VARCHAR(255),
  contact_phone VARCHAR(50),
  office_hours JSONB,
  gemeinde_registration_requirements JSONB,
  school_registration_requirements JSONB,
  last_scraped_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE (municipality, canton)
);

-- ============================================
-- INDEXES FOR PERFORMANCE
-- ============================================

CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_municipality ON users(municipality);
CREATE INDEX IF NOT EXISTS idx_user_segments_user_id ON user_segments(user_id);
CREATE INDEX IF NOT EXISTS idx_user_task_status_user_id ON user_task_status(user_id);
CREATE INDEX IF NOT EXISTS idx_user_task_status_task_id ON user_task_status(task_id);
CREATE INDEX IF NOT EXISTS idx_documents_user_id ON documents(user_id);
CREATE INDEX IF NOT EXISTS idx_ai_operations_user_id ON ai_operations(user_id);

-- ============================================
-- ROW LEVEL SECURITY (RLS)
-- ============================================

ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_segments ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_task_status ENABLE ROW LEVEL SECURITY;
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE ai_operations ENABLE ROW LEVEL SECURITY;

-- Users can only see/edit their own data
CREATE POLICY "Users can view own profile" ON users
  FOR SELECT USING (auth.uid() = auth_user_id);

CREATE POLICY "Users can update own profile" ON users
  FOR UPDATE USING (auth.uid() = auth_user_id);

CREATE POLICY "Users can view own segments" ON user_segments
  FOR SELECT USING (auth.uid() = (SELECT auth_user_id FROM users WHERE id = user_id));

CREATE POLICY "Users can view/update own task status" ON user_task_status
  FOR ALL USING (auth.uid() = (SELECT auth_user_id FROM users WHERE id = user_id));

CREATE POLICY "Users can view own documents" ON documents
  FOR SELECT USING (auth.uid() = (SELECT auth_user_id FROM users WHERE id = user_id));

CREATE POLICY "Users can upload own documents" ON documents
  FOR INSERT WITH CHECK (auth.uid() = (SELECT auth_user_id FROM users WHERE id = user_id));

-- Public tables (all authenticated users can view)
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_variants ENABLE ROW LEVEL SECURITY;
ALTER TABLE modules ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Authenticated users can view tasks" ON tasks
  FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can view task variants" ON task_variants
  FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can view modules" ON modules
  FOR SELECT USING (auth.role() = 'authenticated');

-- ============================================
-- TRIGGERS
-- ============================================

-- Auto-update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tasks_updated_at
  BEFORE UPDATE ON tasks
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Auto-assign user segments
CREATE OR REPLACE FUNCTION assign_user_segments()
RETURNS TRIGGER AS $$
BEGIN
  DELETE FROM user_segments WHERE user_id = NEW.id;
  
  -- EU/EFTA check
  IF NEW.country_of_origin IN ('Germany', 'France', 'Italy', 'Austria', 'Netherlands', 'Belgium', 'Spain', 'Portugal', 'Sweden', 'Denmark', 'Norway', 'Iceland', 'Liechtenstein') THEN
    INSERT INTO user_segments (user_id, segment_name) VALUES (NEW.id, 'EU/EFTA');
  ELSIF NEW.country_of_origin IS NOT NULL THEN
    INSERT INTO user_segments (user_id, segment_name) VALUES (NEW.id, 'Non-EU/EFTA');
  END IF;
  
  -- Family check
  IF NEW.has_kids THEN
    INSERT INTO user_segments (user_id, segment_name) VALUES (NEW.id, 'with_kids');
  END IF;
  
  -- Newcomer check
  IF NEW.months_in_switzerland < 6 THEN
    INSERT INTO user_segments (user_id, segment_name) VALUES (NEW.id, 'newcomer');
  END IF;
  
  -- Always add 'all' segment
  INSERT INTO user_segments (user_id, segment_name) VALUES (NEW.id, 'all');
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_assign_user_segments
  AFTER INSERT OR UPDATE OF country_of_origin, has_kids, months_in_switzerland ON users
  FOR EACH ROW EXECUTE FUNCTION assign_user_segments();

-- ============================================
-- DONE! Schema deployed successfully
-- ============================================