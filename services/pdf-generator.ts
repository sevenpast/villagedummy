import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';

interface FormField {
  name: string;
  value: string;
  translation: string;
  originalName: string;
}

export async function generateFilledKindergartenPDF(fields: Record<string, string>, userProfile: any): Promise<Uint8Array> {
  // Create a new PDF document
  const pdfDoc = await PDFDocument.create();

  // Add a page
  const page = pdfDoc.addPage([595, 842]); // A4 size
  const { width, height } = page.getSize();

  // Get fonts
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

  const fontSize = 11;
  const titleFontSize = 16;
  const sectionFontSize = 12;

  let currentY = height - 50;

  // Title
  page.drawText('Anmeldung Kindergarten Zürich', {
    x: 50,
    y: currentY,
    size: titleFontSize,
    font: boldFont,
    color: rgb(0, 0, 0),
  });
  currentY -= 30;

  page.drawText('Kindergarten Registration Form - Zurich', {
    x: 50,
    y: currentY,
    size: fontSize,
    font: font,
    color: rgb(0.3, 0.3, 0.3),
  });
  currentY -= 40;

  // Helper function to add a field
  const addField = (germanLabel: string, englishLabel: string, value: string) => {
    // German label (original)
    page.drawText(germanLabel + ':', {
      x: 50,
      y: currentY,
      size: fontSize,
      font: boldFont,
      color: rgb(0, 0, 0),
    });

    // English translation
    page.drawText(`(${englishLabel})`, {
      x: 250,
      y: currentY,
      size: fontSize - 1,
      font: font,
      color: rgb(0.5, 0.5, 0.5),
    });
    currentY -= 15;

    // Value
    page.drawText(value || '___________________', {
      x: 60,
      y: currentY,
      size: fontSize,
      font: font,
      color: rgb(0, 0, 0),
    });
    currentY -= 25;
  };

  // Section: Child Information
  page.drawText('ANGABEN ZUM KIND / CHILD INFORMATION', {
    x: 50,
    y: currentY,
    size: sectionFontSize,
    font: boldFont,
    color: rgb(0.2, 0.2, 0.2),
  });
  currentY -= 20;

  // Draw a line
  page.drawLine({
    start: { x: 50, y: currentY },
    end: { x: width - 50, y: currentY },
    thickness: 1,
    color: rgb(0.7, 0.7, 0.7),
  });
  currentY -= 15;

  addField('Vorname des Kindes', 'Child\'s First Name', fields.child_first_name || '');
  addField('Familienname des Kindes', 'Child\'s Last Name', fields.child_last_name || '');
  addField('Geburtsdatum', 'Date of Birth', fields.child_birth_date || '');
  addField('Geschlecht', 'Gender', fields.child_gender || '');
  addField('Staatsangehörigkeit', 'Nationality', fields.child_nationality || '');

  // Section: Parent Information
  currentY -= 10;
  page.drawText('ANGABEN ZUM ERZIEHUNGSBERECHTIGTEN / PARENT INFORMATION', {
    x: 50,
    y: currentY,
    size: sectionFontSize,
    font: boldFont,
    color: rgb(0.2, 0.2, 0.2),
  });
  currentY -= 20;

  page.drawLine({
    start: { x: 50, y: currentY },
    end: { x: width - 50, y: currentY },
    thickness: 1,
    color: rgb(0.7, 0.7, 0.7),
  });
  currentY -= 15;

  addField('Vorname Erziehungsberechtigte/r', 'Parent\'s First Name', fields.parent_first_name || '');
  addField('Familienname Erziehungsberechtigte/r', 'Parent\'s Last Name', fields.parent_last_name || '');
  addField('Adresse', 'Address', fields.address || '');
  addField('Telefonnummer', 'Phone Number', fields.phone || '');
  addField('E-Mail-Adresse', 'Email Address', fields.email || '');

  // Section: Additional Information
  currentY -= 10;
  page.drawText('WEITERE ANGABEN / ADDITIONAL INFORMATION', {
    x: 50,
    y: currentY,
    size: sectionFontSize,
    font: boldFont,
    color: rgb(0.2, 0.2, 0.2),
  });
  currentY -= 20;

  page.drawLine({
    start: { x: 50, y: currentY },
    end: { x: width - 50, y: currentY },
    thickness: 1,
    color: rgb(0.7, 0.7, 0.7),
  });
  currentY -= 15;

  addField('Allergien/Besondere Bedürfnisse', 'Allergies/Special Needs', fields.allergies || '');
  addField('Gewünschtes Eintrittsdatum', 'Desired Entry Date', fields.entry_date || '');

  // Footer
  currentY = 100;
  page.drawText('Datum / Date: ____________________', {
    x: 50,
    y: currentY,
    size: fontSize,
    font: font,
    color: rgb(0, 0, 0),
  });

  page.drawText('Unterschrift / Signature: ____________________', {
    x: 300,
    y: currentY,
    size: fontSize,
    font: font,
    color: rgb(0, 0, 0),
  });

  // Add watermark
  page.drawText('Generated by Village App', {
    x: 50,
    y: 30,
    size: 8,
    font: font,
    color: rgb(0.7, 0.7, 0.7),
  });

  page.drawText(new Date().toLocaleString('de-DE'), {
    x: 450,
    y: 30,
    size: 8,
    font: font,
    color: rgb(0.7, 0.7, 0.7),
  });

  // Serialize the PDFDocument to bytes
  const pdfBytes = await pdfDoc.save();
  return pdfBytes;
}